# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Web Application Server CI/CD

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  CI:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.ACTION_TOKEN }}
        submodules: true
        
    ### runner application java 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    ### gradlew 실행 권한 부여
    - name: Grant execute permisstion for gradlew
      run: chmod +x gradlew
    
    ### project test
    - name: Test
      run: ./gradlew clean test -Pprofile=test

    ### project build
    - name: Build with Gradle
      run: ./gradlew clean build

    ### Docker Image Build and Push
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
        
  CD:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-20.04
    needs: CI

    steps:
    - name: Docker image pull and run
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEV_SSH_HOST }}
        username: ${{ secrets.DEV_SSH_USERNAME }}
        password: ${{ secrets.DEV_SSH_PASSWORD }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_SSH_PORT }}
        script: |
          docker stop naemansan-was
          docker rm naemansan-was
          docker image rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
          docker run -d -v /root/resources:/app/resources --net naemansan-bridge --ip 172.20.0.3 -p 8080:8080 --name naemansan-was ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
